// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: preview-info.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 跟踪事件.
// [EN] Track event.
type TrackEvent int32

const (
	// 跟踪中.
	// [EN] Tracking.
	TrackEvent_ONGOING TrackEvent = 0
	// 跟踪结束.
	// [EN] End of tracking.
	TrackEvent_END TrackEvent = 1
	// 跟踪开始.
	// [EN] Start tracking.
	TrackEvent_START TrackEvent = 2
)

// Enum value maps for TrackEvent.
var (
	TrackEvent_name = map[int32]string{
		0: "ONGOING",
		1: "END",
		2: "START",
	}
	TrackEvent_value = map[string]int32{
		"ONGOING": 0,
		"END":     1,
		"START":   2,
	}
)

func (x TrackEvent) Enum() *TrackEvent {
	p := new(TrackEvent)
	*p = x
	return p
}

func (x TrackEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[0].Descriptor()
}

func (TrackEvent) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[0]
}

func (x TrackEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackEvent.Descriptor instead.
func (TrackEvent) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{0}
}

// VIPER平台支持物体对象类型 [SINCE v1.3.0].
// [EN] VIPER object types [SINCE v1.3.0].
type ObjectType int32

const (
	// 未知.
	// [EN] unknown.
	ObjectType_OBJECT_UNKNOWN ObjectType = 0
	// face. 人脸.
	// [EN] face.
	ObjectType_OBJECT_FACE ObjectType = 1
	// pedestrian. 行人 [SINCE v1.4.0].
	// [EN] pedestrian [SINCE v1.4.0].
	ObjectType_OBJECT_PEDESTRIAN ObjectType = 2
	// automobile. 机动车 [SINCE v1.4.0].
	// [EN] automobile [SINCE v1.4.0].
	ObjectType_OBJECT_AUTOMOBILE ObjectType = 3
	// cyclist. 骑手 [SINCE v1.4.0].
	// [EN] cyclist [SINCE v1.4.0].
	ObjectType_OBJECT_CYCLIST ObjectType = 4
	// human_powered_vehicle. 非机动车 [SINCE v1.4.0].
	// [EN] human_powered_vehicle [SINCE v1.4.0].
	ObjectType_OBJECT_HUMAN_POWERED_VEHICLE ObjectType = 5
	// crowd. 人群 [SINCE v2.0.0].
	// [EN] crowd [SINCE v2.0.0].
	ObjectType_OBJECT_CROWD ObjectType = 6
	// scenario. 长尾 [SINCE v2.2.0].
	// [EN] scenario [SINCE v2.0.0].
	ObjectType_OBJECT_SCENARIO ObjectType = 7
	// algo. 算法仓 [SINCE v3.0.0].
	ObjectType_OBJECT_ALGO ObjectType = 8
	// event. 事件.[SINCE v3.1.0].
	// [EN] event.[SINCE v3.1.0].
	ObjectType_OBJECT_EVENT ObjectType = 11
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0:  "OBJECT_UNKNOWN",
		1:  "OBJECT_FACE",
		2:  "OBJECT_PEDESTRIAN",
		3:  "OBJECT_AUTOMOBILE",
		4:  "OBJECT_CYCLIST",
		5:  "OBJECT_HUMAN_POWERED_VEHICLE",
		6:  "OBJECT_CROWD",
		7:  "OBJECT_SCENARIO",
		8:  "OBJECT_ALGO",
		11: "OBJECT_EVENT",
	}
	ObjectType_value = map[string]int32{
		"OBJECT_UNKNOWN":               0,
		"OBJECT_FACE":                  1,
		"OBJECT_PEDESTRIAN":            2,
		"OBJECT_AUTOMOBILE":            3,
		"OBJECT_CYCLIST":               4,
		"OBJECT_HUMAN_POWERED_VEHICLE": 5,
		"OBJECT_CROWD":                 6,
		"OBJECT_SCENARIO":              7,
		"OBJECT_ALGO":                  8,
		"OBJECT_EVENT":                 11,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[1].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[1]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{1}
}

// VIPER平台支持事件规则类型 [SINCE v2.0.0].
// [EN] VIPER event types. [SINCE v2.0.0].
type EventType int32

const (
	// 未知.
	// [EN] unknown.
	EventType_EVENT_UNKNOWN EventType = 0
	// 逗留事件.
	// [EN] pedestrian stay event.
	EventType_EVENT_PEDESTRIAN_STAY EventType = 1
	// 可疑人员徘徊事件.
	// [EN] pedestrian hover event.
	EventType_EVENT_PEDESTRIAN_HOVER EventType = 2
	// 越线事件.
	// [EN] pedestrian cross line event.
	EventType_EVENT_PEDESTRIAN_CROSS_LINE EventType = 3
	// 区域入侵事件.
	// [EN] pedestrian invade event.
	EventType_EVENT_PEDESTRIAN_INVADE EventType = 4
	// 违停事件.
	// [EN] vehicle park event.
	EventType_EVENT_VEHICLE_PARK EventType = 5
	// 人群过密事件.
	// [EN] crowd over density event.
	EventType_EVENT_CROWD_DENSITY EventType = 50
	// 人群滞留事件.
	// [EN] crowd strand event.
	EventType_EVENT_CROWD_STRAND EventType = 51
	// 人群逆行事件 [SINCE v3.2.0].
	// [EN] crowd retrograde event [SINCE v3.2.0].
	EventType_EVENT_CROWD_RETROGRADE EventType = 52
	// 人群聚集事件 [SINCE v3.2.0].
	// [EN] crowd congregate event [SINCE v3.2.0].
	EventType_EVENT_CROWD_CONGREGATE EventType = 53
	// 人群分散事件 [SINCE v3.2.0].
	// [EN] crowd scatter event [SINCE v3.2.0].
	EventType_EVENT_CROWD_SCATTER EventType = 54
	// 人群速度 [EXPERIMENTAL].
	// [EN] crowd speed [EXPERIMENTAL].
	EventType_EVENT_CROWD_SPEED EventType = 55
	// 人群跨线事件 [SINCE v3.2.0].
	// [EN] crowd crossline event [SINCE v3.2.0].
	EventType_EVENT_CROWD_CROSSLINE EventType = 56
	// 人群社交距离事件 [SINCE v3.2.0].
	// [EN] crowd social distance event [SINCE v3.2.0].
	EventType_EVENT_CROWD_SOCIAL_DISTANCE EventType = 58
	// 人群入侵事件 [SINCE v3.2.0].
	// [EN] crowd intrusion event [SINCE v3.2.0].
	EventType_EVENT_CROWD_INTRUSION EventType = 59
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_UNKNOWN",
		1:  "EVENT_PEDESTRIAN_STAY",
		2:  "EVENT_PEDESTRIAN_HOVER",
		3:  "EVENT_PEDESTRIAN_CROSS_LINE",
		4:  "EVENT_PEDESTRIAN_INVADE",
		5:  "EVENT_VEHICLE_PARK",
		50: "EVENT_CROWD_DENSITY",
		51: "EVENT_CROWD_STRAND",
		52: "EVENT_CROWD_RETROGRADE",
		53: "EVENT_CROWD_CONGREGATE",
		54: "EVENT_CROWD_SCATTER",
		55: "EVENT_CROWD_SPEED",
		56: "EVENT_CROWD_CROSSLINE",
		58: "EVENT_CROWD_SOCIAL_DISTANCE",
		59: "EVENT_CROWD_INTRUSION",
	}
	EventType_value = map[string]int32{
		"EVENT_UNKNOWN":               0,
		"EVENT_PEDESTRIAN_STAY":       1,
		"EVENT_PEDESTRIAN_HOVER":      2,
		"EVENT_PEDESTRIAN_CROSS_LINE": 3,
		"EVENT_PEDESTRIAN_INVADE":     4,
		"EVENT_VEHICLE_PARK":          5,
		"EVENT_CROWD_DENSITY":         50,
		"EVENT_CROWD_STRAND":          51,
		"EVENT_CROWD_RETROGRADE":      52,
		"EVENT_CROWD_CONGREGATE":      53,
		"EVENT_CROWD_SCATTER":         54,
		"EVENT_CROWD_SPEED":           55,
		"EVENT_CROWD_CROSSLINE":       56,
		"EVENT_CROWD_SOCIAL_DISTANCE": 58,
		"EVENT_CROWD_INTRUSION":       59,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{2}
}

// 事件状态 [SINCE v2.2.0].
// [EN] Event status [SINCE v2.0.0].
type EventStatus int32

const (
	// 未知
	// [EN] unknown.
	EventStatus_STATUS_UNKNOWN EventStatus = 0
	// 事件开始
	// [EN] event start.
	EventStatus_STATUS_START EventStatus = 1
	// 事件继续
	// [EN] event continue.
	EventStatus_STATUS_CONTINUE EventStatus = 2
	// 事件结束
	// [EN] event stop.
	EventStatus_STATUS_STOP EventStatus = 3
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_START",
		2: "STATUS_CONTINUE",
		3: "STATUS_STOP",
	}
	EventStatus_value = map[string]int32{
		"STATUS_UNKNOWN":  0,
		"STATUS_START":    1,
		"STATUS_CONTINUE": 2,
		"STATUS_STOP":     3,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[3].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[3]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{3}
}

// 属性类型.
// [EN] Attribute type.
type AttributeType int32

const (
	// 判别问题, 对应的category与属性名相同, 对应的value为属性为真的置信度,
	// 范围: [0.0, 1.0], 如smile: 0.8 [SINCE v3.2.0].
	// [EN] For discrimination problems, the corresponding category is the same as the attribute name, and the corresponding value is the confidence that the attribute is true,
	// range: [0.0, 1.0], such as smile: 0.8 [SINCE v3.2.0].
	AttributeType_DISCRIMINATION AttributeType = 0
	// 回归问题, 对应category与属性名相同, 对应value为取值, 如age: 25 [SINCE v3.2.0].
	// [EN] For regression problems, the corresponding category is the same as the attribute name, and the corresponding value is the value, such as age: 25 [SINCE v3.2.0].
	AttributeType_REGRESSION AttributeType = 1
	// 分类问题, 对应category为可能取值中置信度最高的分类名称, 对应value
	// 为置信度, 范围: [0.0, 1.0] [SINCE v3.2.0].
	// [EN] For classification problems, the corresponding category is the classification name with the highest confidence among possible values, and the corresponding value is the confidence, range: [0.0, 1.0] [SINCE v3.2.0].
	AttributeType_CLASSIFICATION AttributeType = 2
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0: "DISCRIMINATION",
		1: "REGRESSION",
		2: "CLASSIFICATION",
	}
	AttributeType_value = map[string]int32{
		"DISCRIMINATION": 0,
		"REGRESSION":     1,
		"CLASSIFICATION": 2,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[4].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[4]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{4}
}

// 长尾类型 [SINCE v2.2.0] [DEPRECATED].
// [EN] Scenario type [SINCE v2.2.0] [DEPRECATED].
type ScenarioType int32

const (
	//未知
	// [EN] unknown.
	ScenarioType_ST_UNKNOWN ScenarioType = 0
	// 违规占道经营.
	// [EN] illegal operation.
	ScenarioType_ST_STALL ScenarioType = 1
	// 烟火.
	// [EN] file.
	ScenarioType_ST_FIRE ScenarioType = 2
	// 臧疆标语检测.
	// [EN] logan of XiZang and XinJiang.
	ScenarioType_ST_SLOGAN ScenarioType = 3
	// 景观灯损坏.
	// [EN] landscape lamp damaged.
	ScenarioType_ST_LANDSCAPE_LAMP ScenarioType = 4
	// 工地堆放不当.
	// [EN] clutter.
	ScenarioType_ST_CLUTTER ScenarioType = 5
	// 路面清洁（车辆抛洒）.
	// [EN] road clean.
	ScenarioType_ST_ROAD_CLEAN ScenarioType = 6
	// 工地泥土覆盖.
	// [EN] soil.
	ScenarioType_ST_SOIL ScenarioType = 7
	// 打包垃圾检测.
	// [EN] packaging garbage.
	ScenarioType_ST_GARBAGE ScenarioType = 8
	// 共享单车分类.
	// [EN] shared bicycle classification.
	ScenarioType_ST_SHARED_BICYCLE ScenarioType = 9
	// 共享单车乱序摆放.
	// [EN] shared bicycles in disorder.
	ScenarioType_ST_SHARED_BICYCLE_MISORDER ScenarioType = 10
)

// Enum value maps for ScenarioType.
var (
	ScenarioType_name = map[int32]string{
		0:  "ST_UNKNOWN",
		1:  "ST_STALL",
		2:  "ST_FIRE",
		3:  "ST_SLOGAN",
		4:  "ST_LANDSCAPE_LAMP",
		5:  "ST_CLUTTER",
		6:  "ST_ROAD_CLEAN",
		7:  "ST_SOIL",
		8:  "ST_GARBAGE",
		9:  "ST_SHARED_BICYCLE",
		10: "ST_SHARED_BICYCLE_MISORDER",
	}
	ScenarioType_value = map[string]int32{
		"ST_UNKNOWN":                 0,
		"ST_STALL":                   1,
		"ST_FIRE":                    2,
		"ST_SLOGAN":                  3,
		"ST_LANDSCAPE_LAMP":          4,
		"ST_CLUTTER":                 5,
		"ST_ROAD_CLEAN":              6,
		"ST_SOIL":                    7,
		"ST_GARBAGE":                 8,
		"ST_SHARED_BICYCLE":          9,
		"ST_SHARED_BICYCLE_MISORDER": 10,
	}
)

func (x ScenarioType) Enum() *ScenarioType {
	p := new(ScenarioType)
	*p = x
	return p
}

func (x ScenarioType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScenarioType) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[5].Descriptor()
}

func (ScenarioType) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[5]
}

func (x ScenarioType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScenarioType.Descriptor instead.
func (ScenarioType) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{5}
}

// 人群流动(聚集/分散)方向 [EXPERIMENTAL].
// [EN] crowd congregate or scatter direction [EXPERIMENTAL].
type CrowdDirection int32

const (
	// 位置方向.
	CrowdDirection_CROWD_UNKNOWN CrowdDirection = 0
	// 同心.
	// [EN] crowd move to same concentric.
	CrowdDirection_CONCENTRIC CrowdDirection = 1
	// 同向.
	// [EN] crowd move to same direction.
	CrowdDirection_SAME_DIRECTION CrowdDirection = 2
)

// Enum value maps for CrowdDirection.
var (
	CrowdDirection_name = map[int32]string{
		0: "CROWD_UNKNOWN",
		1: "CONCENTRIC",
		2: "SAME_DIRECTION",
	}
	CrowdDirection_value = map[string]int32{
		"CROWD_UNKNOWN":  0,
		"CONCENTRIC":     1,
		"SAME_DIRECTION": 2,
	}
)

func (x CrowdDirection) Enum() *CrowdDirection {
	p := new(CrowdDirection)
	*p = x
	return p
}

func (x CrowdDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrowdDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_preview_info_proto_enumTypes[6].Descriptor()
}

func (CrowdDirection) Type() protoreflect.EnumType {
	return &file_preview_info_proto_enumTypes[6]
}

func (x CrowdDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrowdDirection.Descriptor instead.
func (CrowdDirection) EnumDescriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{6}
}

// 二维图像坐标, 注意: 坐标系与输入图像相同 [SINCE v1.3.0].
// [EN] Coordinates of two-dimensional image. Note: the coordinate system is the same as the input image [SINCE v1.3.0].
type Vertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vertex) Reset() {
	*x = Vertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertex) ProtoMessage() {}

func (x *Vertex) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertex.ProtoReflect.Descriptor instead.
func (*Vertex) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{0}
}

func (x *Vertex) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vertex) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// 目标检测结果多边形边界 [SINCE v1.3.0].
// [EN] Bounding poly for target detection result [SINCE v1.3.0].
type BoundingPoly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertices []*Vertex `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *BoundingPoly) Reset() {
	*x = BoundingPoly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingPoly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingPoly) ProtoMessage() {}

func (x *BoundingPoly) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingPoly.ProtoReflect.Descriptor instead.
func (*BoundingPoly) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{1}
}

func (x *BoundingPoly) GetVertices() []*Vertex {
	if x != nil {
		return x.Vertices
	}
	return nil
}

// 角度 [SINCE v1.3.0].
// [EN] angle [SINCE v1.3.0].
type Angle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对象姿态变化角度, 单位是度.
	// [EN] Yawing angle, with the unit - degree.
	Yaw float32 `protobuf:"fixed32,1,opt,name=yaw,proto3" json:"yaw,omitempty"`
	// 对象俯仰变化角度, 单位是度.
	// [EN] Pitching angle, with the unit - degree.
	Pitch float32 `protobuf:"fixed32,2,opt,name=pitch,proto3" json:"pitch,omitempty"`
	// 对象平面旋转角度, 单位是度.
	// [EN] Rolling angle, with the unit - degree.
	Roll float32 `protobuf:"fixed32,3,opt,name=roll,proto3" json:"roll,omitempty"`
}

func (x *Angle) Reset() {
	*x = Angle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Angle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Angle) ProtoMessage() {}

func (x *Angle) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Angle.ProtoReflect.Descriptor instead.
func (*Angle) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{2}
}

func (x *Angle) GetYaw() float32 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

func (x *Angle) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Angle) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

// 二维图像大小 [SINCE v2.0.0].
// [EN] The size of two-dimensional image [SINCE v2.0.0].
type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{3}
}

func (x *Size) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Size) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 二维图像向量. 注意: 坐标系与输入图像相同 [SINCE v2.2.0].
// [EN] Vectors of tw-dimensional image. Note: the coordinate system is the same as the input image [SINCE v2.2.0].
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{4}
}

func (x *Vector) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// 关联对象 [SINCE v2.1.0].
// [EN] Associated objects [SINCE v2.1.0].
type ObjectAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关联目标类型.
	// [EN] Type of associated object.
	Type ObjectType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.ObjectType" json:"type,omitempty"`
	// 可选, 关联目标对象object_id, 如为空则与本对象一致.
	// [EN] Optional, associated object with object_id; if it is empty, it is consistent with this object.
	ObjectId string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// 可选, 关联关系类型 [SINCE v3.1.0].
	// [EN] Type of association [SINCE v3.1.0].
	AssociationType string `protobuf:"bytes,3,opt,name=association_type,json=associationType,proto3" json:"association_type,omitempty"`
}

func (x *ObjectAssociation) Reset() {
	*x = ObjectAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAssociation) ProtoMessage() {}

func (x *ObjectAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAssociation.ProtoReflect.Descriptor instead.
func (*ObjectAssociation) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{5}
}

func (x *ObjectAssociation) GetType() ObjectType {
	if x != nil {
		return x.Type
	}
	return ObjectType_OBJECT_UNKNOWN
}

func (x *ObjectAssociation) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ObjectAssociation) GetAssociationType() string {
	if x != nil {
		return x.AssociationType
	}
	return ""
}

// VIPER平台事件任务规则 [SINCE v2.2.0].
// [EN] VIPER event rule [SINCE v2.2.0].
type EventRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 事件类型.
	// [EN] Event type.
	Type EventType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.EventType" json:"type,omitempty"`
	// 规则ID.
	// [EN] Rule ID.
	RuleId string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// ROI区域，两点表示直线，多点表示多边形.
	// [EN] ROI zone, two points represent lines, and many points represent polygons.
	Roi *BoundingPoly `protobuf:"bytes,3,opt,name=roi,proto3" json:"roi,omitempty"`
	// 可选, 事件持续时长，单位为毫秒
	// [EN] Optional, event duration, with the unit - millisecond.
	DurationMs int32 `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// 可选, 方向. 用于跨线事件. 此为非范化向量坐标(图像坐标系), 例如(-1,0)表示左, (1,0)表示右, (0,-1)表示上, (0,1)表示下, (1,1)表示右下, (0,0)表示不限定方向. 不填或置空表示业务不要求方向.
	// [EN] Optional, direction. Used for cross-line events. This is a non-normalized vectorial coordinate (image coordinate system). For example (-1,0) means left, (1,0) means right, (0,-1) means upward side, (0,1) means lower side, (1,1) means lower right, (0,0) means unlimited direction. Blank indicates the task has no direction limitation.
	Direction *Vector `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *EventRule) Reset() {
	*x = EventRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRule) ProtoMessage() {}

func (x *EventRule) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRule.ProtoReflect.Descriptor instead.
func (*EventRule) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{6}
}

func (x *EventRule) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_UNKNOWN
}

func (x *EventRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *EventRule) GetRoi() *BoundingPoly {
	if x != nil {
		return x.Roi
	}
	return nil
}

func (x *EventRule) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *EventRule) GetDirection() *Vector {
	if x != nil {
		return x.Direction
	}
	return nil
}

// 事件 [SINCE v2.2.0].
// [EN] event [SINCE v2.2.0].
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 规则ID, 仅在OBJECT_MULTI_PACH任务有效.
	// [EN] rule ID, only valid in OBJECT_MULTI_PACH task.
	RuleId string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// 事件状态, 仅在OBJECT_MULTI_PACH任务有效.
	// [EN] event status, only valid in OBJECT_MULTI_PACH task.
	Status EventStatus `protobuf:"varint,2,opt,name=status,proto3,enum=pb.EventStatus" json:"status,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{7}
}

func (x *Event) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *Event) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_STATUS_UNKNOWN
}

// 带分数的属性类型.
// [EN] Attribute with score.
type AttributeWithScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 属性类型 [SINCE v3.2.0].
	// [EN] Attribute type [SINCE v3.2.0].
	Type AttributeType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.AttributeType" json:"type,omitempty"`
	// 属性分类取值 [SINCE v3.2.0].
	// [EN] Attribute category value [SINCE v3.2.0].
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// 属性置信度或回归问题取值 [SINCE v3.2.0].
	// [EN] Attribute confidence value or regression problem value [SINCE v3.2.0].
	Value float32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	// 属性对应的对象所在位置 [SINCE v3.2.0].
	// [EN] The position of the object corresponding to the attribute [SINCE v3.2.0].
	Roi *BoundingPoly `protobuf:"bytes,4,opt,name=roi,proto3" json:"roi,omitempty"`
}

func (x *AttributeWithScore) Reset() {
	*x = AttributeWithScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeWithScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeWithScore) ProtoMessage() {}

func (x *AttributeWithScore) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeWithScore.ProtoReflect.Descriptor instead.
func (*AttributeWithScore) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{8}
}

func (x *AttributeWithScore) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_DISCRIMINATION
}

func (x *AttributeWithScore) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AttributeWithScore) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AttributeWithScore) GetRoi() *BoundingPoly {
	if x != nil {
		return x.Roi
	}
	return nil
}

// 算法仓应用生成的OBJECT_EVENT注释 [SINCE v3.1.0].
// [EN] OBJECT_EVENT annotation produced by Algo application [SINCE v3.1.0].
type EventObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 规则ID.
	// [EN] rule ID.
	RuleId string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// 事件类型 [SINCE v3.1.0].
	// [EN] Event type [SINCE v3.1.0].
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *EventObject) Reset() {
	*x = EventObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObject) ProtoMessage() {}

func (x *EventObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObject.ProtoReflect.Descriptor instead.
func (*EventObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{9}
}

func (x *EventObject) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *EventObject) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

// 所有被track的对象信息 [SINCE v1.3.0].
// [EN] All tracked object information [SINCE v2.2.0].
type PreviewObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对象类型, 算法仓输出的算法对象(包括主算法对象)类型都为 OBJECT_ALGO, 真实对象类型在 algo.object_type 字段.
	// [EN] Object type, all algo object type(include main algorithm object type) is OBJECT_ALGO, real object type is algo.object_type.
	ObjectType ObjectType `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=pb.ObjectType" json:"object_type,omitempty"`
	// 对象ID [DEPRECATED].
	// [EN] Track type [DEPRECATED].
	TrackId int64 `protobuf:"varint,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	// 可选，对象ID [SINCE v2.2.0].
	// [EN] Optional, object id [SINCE v2.2.0].
	ObjectId string `protobuf:"bytes,8,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// 对象边界.
	// [EN] Object boundary.
	Bounding *BoundingPoly `protobuf:"bytes,3,opt,name=bounding,proto3" json:"bounding,omitempty"`
	// 对象置信度.
	// [EN] Object quality.
	Quality float32 `protobuf:"fixed32,4,opt,name=quality,proto3" json:"quality,omitempty"`
	// 可选, 人脸对象角度, 仅在OBJECT_FACE有效.
	// [EN] Object angle, only valid in OBJECT_FACE.
	Angle *Angle `protobuf:"bytes,5,opt,name=angle,proto3" json:"angle,omitempty"`
	// 可选，属性信息 [SINCE v2.2.0].
	// [EN] Optional, object attribute information [SINCE v2.2.0].
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 目标跟踪状态 [SINCE v3.1.0].
	// [EN] Object tracking status [SINCE v3.1.0].
	TrackEvent TrackEvent `protobuf:"varint,9,opt,name=track_event,json=trackEvent,proto3,enum=pb.TrackEvent" json:"track_event,omitempty"`
	// 可选, 关联对象列表, 如其中object_id为空, 则关联对象object_id与本对象object_id一致 [SINCE v3.1.0].
	// [EN] Optional, The list of associated objects, if the object_id is null,
	// the object_id of the associated object is consistent with the object_id of this object [SINCE v3.1.0].
	Associations []*ObjectAssociation `protobuf:"bytes,12,rep,name=associations,proto3" json:"associations,omitempty"`
	// 可选，触发的事件信息, 仅在OBJECT_MULTI_PACH任务有效 [SINCE v2.2.0].
	// [EN] Optional, triggered event information, only valid in OBJECT_MULTI_PACH task [SINCE v2.2.0].
	Events []*Event `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	// 可选，人群信息 [SINCE v2.2.0].
	// [EN] Optional, crowd information [SINCE v2.2.0].
	Crowd *CrowdObject `protobuf:"bytes,20,opt,name=crowd,proto3" json:"crowd,omitempty"`
	// 可选，长尾信息 [SINCE v2.2.0] [DEPRECATED].
	// [EN] Optional, Scenario object information [SINCE v2.2.0] [DEPRECATED].
	Scenario *ScenarioObject `protobuf:"bytes,21,opt,name=scenario,proto3" json:"scenario,omitempty"`
	// 可选, 算法仓信息 [SINCE v3.0.0].
	// [EN] Optional, algo [SINCE v3.0.0].
	Algo *AlgoObject `protobuf:"bytes,22,opt,name=algo,proto3" json:"algo,omitempty"`
	// 算法仓应用生成的OBJECT_EVENT注释 [SINCE v3.1.0].
	// [EN] OBJECT_EVENT annotation produced by Algo application [SINCE v3.1.0].
	Event *EventObject `protobuf:"bytes,23,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *PreviewObject) Reset() {
	*x = PreviewObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewObject) ProtoMessage() {}

func (x *PreviewObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewObject.ProtoReflect.Descriptor instead.
func (*PreviewObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewObject) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_OBJECT_UNKNOWN
}

func (x *PreviewObject) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

func (x *PreviewObject) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *PreviewObject) GetBounding() *BoundingPoly {
	if x != nil {
		return x.Bounding
	}
	return nil
}

func (x *PreviewObject) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PreviewObject) GetAngle() *Angle {
	if x != nil {
		return x.Angle
	}
	return nil
}

func (x *PreviewObject) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *PreviewObject) GetTrackEvent() TrackEvent {
	if x != nil {
		return x.TrackEvent
	}
	return TrackEvent_ONGOING
}

func (x *PreviewObject) GetAssociations() []*ObjectAssociation {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *PreviewObject) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PreviewObject) GetCrowd() *CrowdObject {
	if x != nil {
		return x.Crowd
	}
	return nil
}

func (x *PreviewObject) GetScenario() *ScenarioObject {
	if x != nil {
		return x.Scenario
	}
	return nil
}

func (x *PreviewObject) GetAlgo() *AlgoObject {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *PreviewObject) GetEvent() *EventObject {
	if x != nil {
		return x.Event
	}
	return nil
}

// 长尾信息 [SINCE v2.2.0] [DEPRECATED].
// [EN] Scenario object information [SINCE v2.2.0] [DEPRECATED].
type ScenarioObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 长尾类型.
	// [EN] Scenario type.
	Type ScenarioType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.ScenarioType" json:"type,omitempty"`
}

func (x *ScenarioObject) Reset() {
	*x = ScenarioObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioObject) ProtoMessage() {}

func (x *ScenarioObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioObject.ProtoReflect.Descriptor instead.
func (*ScenarioObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{11}
}

func (x *ScenarioObject) GetType() ScenarioType {
	if x != nil {
		return x.Type
	}
	return ScenarioType_ST_UNKNOWN
}

// 人群跨线信息 [EXPERIMENTAL].
// [EN] crowd cross line information [EXPERIMENTAL].
type CrossLineObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ROI ID.
	// [EN] ROI ID.
	RoiId int32 `protobuf:"varint,1,opt,name=roi_id,json=roiId,proto3" json:"roi_id,omitempty"`
	// 人群ROI区域.
	// [EN] ROI areas of crowd.
	Roi *BoundingPoly `protobuf:"bytes,2,opt,name=roi,proto3" json:"roi,omitempty"`
	// 进入流数.
	// [EN] In count.
	InCount int32 `protobuf:"varint,3,opt,name=in_count,json=inCount,proto3" json:"in_count,omitempty"`
	// 出人流数.
	// [EN] Cout count.
	OutCount int32 `protobuf:"varint,4,opt,name=out_count,json=outCount,proto3" json:"out_count,omitempty"`
}

func (x *CrossLineObject) Reset() {
	*x = CrossLineObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossLineObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossLineObject) ProtoMessage() {}

func (x *CrossLineObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossLineObject.ProtoReflect.Descriptor instead.
func (*CrossLineObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{12}
}

func (x *CrossLineObject) GetRoiId() int32 {
	if x != nil {
		return x.RoiId
	}
	return 0
}

func (x *CrossLineObject) GetRoi() *BoundingPoly {
	if x != nil {
		return x.Roi
	}
	return nil
}

func (x *CrossLineObject) GetInCount() int32 {
	if x != nil {
		return x.InCount
	}
	return 0
}

func (x *CrossLineObject) GetOutCount() int32 {
	if x != nil {
		return x.OutCount
	}
	return 0
}

// 人群流动(聚集/分散)分析结果 [EXPERIMENTAL].
// [EN] crowd congregate or scatter analyze result [EXPERIMENTAL].
type CrowdMovementObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人群流动分析ROI区域 ID.
	// [EN] Roi id.
	RoiId int32 `protobuf:"varint,1,opt,name=roi_id,json=roiId,proto3" json:"roi_id,omitempty"`
	// 人群ROI区域.
	// [EN] ROI areas of crowd.
	Roi *BoundingPoly `protobuf:"bytes,2,opt,name=roi,proto3" json:"roi,omitempty"`
	// 人群中的小群体, 聚集/分散方向.
	// [EN] Move direction of evey small group in crowd group.
	Directions []CrowdDirection `protobuf:"varint,3,rep,packed,name=directions,proto3,enum=pb.CrowdDirection" json:"directions,omitempty"`
}

func (x *CrowdMovementObject) Reset() {
	*x = CrowdMovementObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrowdMovementObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrowdMovementObject) ProtoMessage() {}

func (x *CrowdMovementObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrowdMovementObject.ProtoReflect.Descriptor instead.
func (*CrowdMovementObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{13}
}

func (x *CrowdMovementObject) GetRoiId() int32 {
	if x != nil {
		return x.RoiId
	}
	return 0
}

func (x *CrowdMovementObject) GetRoi() *BoundingPoly {
	if x != nil {
		return x.Roi
	}
	return nil
}

func (x *CrowdMovementObject) GetDirections() []CrowdDirection {
	if x != nil {
		return x.Directions
	}
	return nil
}

// 人群流动速度 [EXPERIMENTAL].
// [EN] crowd speed analyze result [EXPERIMENTAL].
type CrowdSpeedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人群流动速度分析ROI区域 ID.
	// [EN] Roi id.
	RoiId int32 `protobuf:"varint,1,opt,name=roi_id,json=roiId,proto3" json:"roi_id,omitempty"`
	// 人群ROI区域.
	// [EN] ROI areas of crowd.
	Roi *BoundingPoly `protobuf:"bytes,2,opt,name=roi,proto3" json:"roi,omitempty"`
	// 人体速度信息.
	// [EN] crowd move speed.
	Speed float32 `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *CrowdSpeedObject) Reset() {
	*x = CrowdSpeedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrowdSpeedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrowdSpeedObject) ProtoMessage() {}

func (x *CrowdSpeedObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrowdSpeedObject.ProtoReflect.Descriptor instead.
func (*CrowdSpeedObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{14}
}

func (x *CrowdSpeedObject) GetRoiId() int32 {
	if x != nil {
		return x.RoiId
	}
	return 0
}

func (x *CrowdSpeedObject) GetRoi() *BoundingPoly {
	if x != nil {
		return x.Roi
	}
	return nil
}

func (x *CrowdSpeedObject) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

// 人群密度信息 [SINCE v2.0.0].
// [EN] crowd density information [SINCE v2.0.0].
type CrowdObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行人数量.
	// [EN] crowd quantity.
	Quantity int64 `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 密度图大小.
	// [EN] size of density map.
	DensitySize *Size `protobuf:"bytes,2,opt,name=density_size,json=densitySize,proto3" json:"density_size,omitempty"`
	// 密度分布，矩阵，每个点代表相应区域的人群密度
	// [EN] density map.
	Density []byte `protobuf:"bytes,3,opt,name=density,proto3" json:"density,omitempty"`
	// 人群人头点实时分析结果 [SINCE v3.2.0].
	// crowd head target realtime analysis results [SINCE v3.2.0].
	FullHeadTargets *CrowdObject_HeadTargetsAnnotation `protobuf:"bytes,9,opt,name=full_head_targets,json=fullHeadTargets,proto3" json:"full_head_targets,omitempty"`
}

func (x *CrowdObject) Reset() {
	*x = CrowdObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrowdObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrowdObject) ProtoMessage() {}

func (x *CrowdObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrowdObject.ProtoReflect.Descriptor instead.
func (*CrowdObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{15}
}

func (x *CrowdObject) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CrowdObject) GetDensitySize() *Size {
	if x != nil {
		return x.DensitySize
	}
	return nil
}

func (x *CrowdObject) GetDensity() []byte {
	if x != nil {
		return x.Density
	}
	return nil
}

func (x *CrowdObject) GetFullHeadTargets() *CrowdObject_HeadTargetsAnnotation {
	if x != nil {
		return x.FullHeadTargets
	}
	return nil
}

// 算法仓信息 [SINCE v3.0.0].
type AlgoObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 算法应用名称.
	// [EN] algo app name.
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// 算法应用版本.
	// [EN] algo app version.
	AppVersion int32 `protobuf:"varint,2,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// 目标自定义类型.
	// [EN] custom object type.
	ObjectType string `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// 目标自定义对象版本.
	// [EN] custom object version.
	ObjectVersion int32 `protobuf:"varint,4,opt,name=object_version,json=objectVersion,proto3" json:"object_version,omitempty"`
	// 可选, JSON编码的自定义数据.
	// [EN] Optional, json encoded data.
	Data string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AlgoObject) Reset() {
	*x = AlgoObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoObject) ProtoMessage() {}

func (x *AlgoObject) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoObject.ProtoReflect.Descriptor instead.
func (*AlgoObject) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{16}
}

func (x *AlgoObject) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AlgoObject) GetAppVersion() int32 {
	if x != nil {
		return x.AppVersion
	}
	return 0
}

func (x *AlgoObject) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *AlgoObject) GetObjectVersion() int32 {
	if x != nil {
		return x.ObjectVersion
	}
	return 0
}

func (x *AlgoObject) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 叠框信息 [SINCE v1.4.0]
// [EN] preview information [SINCE v1.4.0]
type PreviewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 相对视频流的时间戳
	// [EN] timestamp.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 跟踪对象信息
	// [EN] Tracking object information.
	Objects []*PreviewObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
	// 可选，事件规则
	// [EN] Optional, event rule.
	Rules []*EventRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *PreviewInfo) Reset() {
	*x = PreviewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewInfo) ProtoMessage() {}

func (x *PreviewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewInfo.ProtoReflect.Descriptor instead.
func (*PreviewInfo) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{17}
}

func (x *PreviewInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PreviewInfo) GetObjects() []*PreviewObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *PreviewInfo) GetRules() []*EventRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// 人群中的单人信息 [SINCE v3.2.0].
// [EN] information for single person in the crowd [SINCE v3.2.0].
type CrowdObject_HeadTargetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人头点坐标 [SINCE v3.2.0].
	// [EN] The coordinates indicate the head's position [SINCE v3.2.0].
	Coordinate *Vector `protobuf:"bytes,1,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	// 人头框 [SINCE v3.2.0].
	// [EN] The rectangle bounding indicate the head's position [SINCE v3.2.0].
	Rectangle *BoundingPoly `protobuf:"bytes,2,opt,name=rectangle,proto3" json:"rectangle,omitempty"`
}

func (x *CrowdObject_HeadTargetInfo) Reset() {
	*x = CrowdObject_HeadTargetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrowdObject_HeadTargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrowdObject_HeadTargetInfo) ProtoMessage() {}

func (x *CrowdObject_HeadTargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrowdObject_HeadTargetInfo.ProtoReflect.Descriptor instead.
func (*CrowdObject_HeadTargetInfo) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CrowdObject_HeadTargetInfo) GetCoordinate() *Vector {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *CrowdObject_HeadTargetInfo) GetRectangle() *BoundingPoly {
	if x != nil {
		return x.Rectangle
	}
	return nil
}

// 人群人头点实时分析结果 [SINCE v3.2.0].
// crowd head target realtime analysis results [SINCE v3.2.0].
type CrowdObject_HeadTargetsAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 人群中的单人信息 [SINCE v3.2.0].
	// [EN] information for single person in the crowd [SINCE v3.2.0].
	HeadTargets []*CrowdObject_HeadTargetInfo `protobuf:"bytes,1,rep,name=head_targets,json=headTargets,proto3" json:"head_targets,omitempty"`
}

func (x *CrowdObject_HeadTargetsAnnotation) Reset() {
	*x = CrowdObject_HeadTargetsAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preview_info_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrowdObject_HeadTargetsAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrowdObject_HeadTargetsAnnotation) ProtoMessage() {}

func (x *CrowdObject_HeadTargetsAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_preview_info_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrowdObject_HeadTargetsAnnotation.ProtoReflect.Descriptor instead.
func (*CrowdObject_HeadTargetsAnnotation) Descriptor() ([]byte, []int) {
	return file_preview_info_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CrowdObject_HeadTargetsAnnotation) GetHeadTargets() []*CrowdObject_HeadTargetInfo {
	if x != nil {
		return x.HeadTargets
	}
	return nil
}

var File_preview_info_proto protoreflect.FileDescriptor

var file_preview_info_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x24, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x36,
	0x0a, 0x0c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x12, 0x26,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x05, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x79, 0x61,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x22, 0x34, 0x0a, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x24, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x7f, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x79, 0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x49, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x03,
	0x72, 0x6f, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x52, 0x03, 0x72, 0x6f, 0x69,
	0x22, 0x45, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x05, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x63,
	0x72, 0x6f, 0x77, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36,
	0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6f,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x69, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79,
	0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6f, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x69, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03,
	0x72, 0x6f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x52, 0x03, 0x72, 0x6f, 0x69,
	0x12, 0x32, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6f, 0x69, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x69, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x52, 0x03,
	0x72, 0x6f, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0xdb, 0x03, 0x0a, 0x0b, 0x43, 0x72,
	0x6f, 0x77, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x11,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f,
	0x77, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x66, 0x75, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a,
	0x6c, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x79, 0x52, 0x09, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x1a, 0x5a, 0x0a,
	0x15, 0x48, 0x65, 0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x08, 0x52,
	0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x67, 0x6f,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2a, 0x2d, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x2a, 0xa1, 0x02, 0x0a,
	0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x55, 0x4d,
	0x41, 0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43,
	0x52, 0x4f, 0x57, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x22, 0x04,
	0x08, 0x09, 0x10, 0x09, 0x22, 0x04, 0x08, 0x0a, 0x10, 0x0a, 0x22, 0x04, 0x08, 0x64, 0x10, 0x64,
	0x22, 0x04, 0x08, 0x65, 0x10, 0x65, 0x22, 0x04, 0x08, 0x66, 0x10, 0x66, 0x22, 0x04, 0x08, 0x67,
	0x10, 0x67, 0x22, 0x04, 0x08, 0x68, 0x10, 0x68, 0x22, 0x04, 0x08, 0x69, 0x10, 0x69, 0x22, 0x04,
	0x08, 0x6a, 0x10, 0x6a, 0x22, 0x04, 0x08, 0x6b, 0x10, 0x6b, 0x22, 0x04, 0x08, 0x6d, 0x10, 0x6d,
	0x2a, 0x9b, 0x03, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4e,
	0x5f, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x44, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x4b, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x44, 0x45,
	0x4e, 0x53, 0x49, 0x54, 0x59, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x33, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x36,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x37, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x38, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57,
	0x44, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f,
	0x57, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x2a, 0x59,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x2a, 0x47, 0x0a, 0x0d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49,
	0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x2a, 0xd6, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x47, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x4c, 0x41,
	0x4d, 0x50, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x54, 0x54,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x41, 0x44, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x53, 0x4f,
	0x49, 0x4c, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x52, 0x42, 0x41,
	0x47, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x5f, 0x42, 0x49, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x49, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x49, 0x53, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0a, 0x2a, 0x47, 0x0a, 0x0e, 0x43,
	0x72, 0x6f, 0x77, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_preview_info_proto_rawDescOnce sync.Once
	file_preview_info_proto_rawDescData = file_preview_info_proto_rawDesc
)

func file_preview_info_proto_rawDescGZIP() []byte {
	file_preview_info_proto_rawDescOnce.Do(func() {
		file_preview_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_preview_info_proto_rawDescData)
	})
	return file_preview_info_proto_rawDescData
}

var file_preview_info_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_preview_info_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_preview_info_proto_goTypes = []interface{}{
	(TrackEvent)(0),                           // 0: pb.TrackEvent
	(ObjectType)(0),                           // 1: pb.ObjectType
	(EventType)(0),                            // 2: pb.EventType
	(EventStatus)(0),                          // 3: pb.EventStatus
	(AttributeType)(0),                        // 4: pb.AttributeType
	(ScenarioType)(0),                         // 5: pb.ScenarioType
	(CrowdDirection)(0),                       // 6: pb.CrowdDirection
	(*Vertex)(nil),                            // 7: pb.Vertex
	(*BoundingPoly)(nil),                      // 8: pb.BoundingPoly
	(*Angle)(nil),                             // 9: pb.Angle
	(*Size)(nil),                              // 10: pb.Size
	(*Vector)(nil),                            // 11: pb.Vector
	(*ObjectAssociation)(nil),                 // 12: pb.ObjectAssociation
	(*EventRule)(nil),                         // 13: pb.EventRule
	(*Event)(nil),                             // 14: pb.Event
	(*AttributeWithScore)(nil),                // 15: pb.AttributeWithScore
	(*EventObject)(nil),                       // 16: pb.EventObject
	(*PreviewObject)(nil),                     // 17: pb.PreviewObject
	(*ScenarioObject)(nil),                    // 18: pb.ScenarioObject
	(*CrossLineObject)(nil),                   // 19: pb.CrossLineObject
	(*CrowdMovementObject)(nil),               // 20: pb.CrowdMovementObject
	(*CrowdSpeedObject)(nil),                  // 21: pb.CrowdSpeedObject
	(*CrowdObject)(nil),                       // 22: pb.CrowdObject
	(*AlgoObject)(nil),                        // 23: pb.AlgoObject
	(*PreviewInfo)(nil),                       // 24: pb.PreviewInfo
	nil,                                       // 25: pb.PreviewObject.AttributesEntry
	(*CrowdObject_HeadTargetInfo)(nil),        // 26: pb.CrowdObject.HeadTargetInfo
	(*CrowdObject_HeadTargetsAnnotation)(nil), // 27: pb.CrowdObject.HeadTargetsAnnotation
}
var file_preview_info_proto_depIdxs = []int32{
	7,  // 0: pb.BoundingPoly.vertices:type_name -> pb.Vertex
	1,  // 1: pb.ObjectAssociation.type:type_name -> pb.ObjectType
	2,  // 2: pb.EventRule.type:type_name -> pb.EventType
	8,  // 3: pb.EventRule.roi:type_name -> pb.BoundingPoly
	11, // 4: pb.EventRule.direction:type_name -> pb.Vector
	3,  // 5: pb.Event.status:type_name -> pb.EventStatus
	4,  // 6: pb.AttributeWithScore.type:type_name -> pb.AttributeType
	8,  // 7: pb.AttributeWithScore.roi:type_name -> pb.BoundingPoly
	1,  // 8: pb.PreviewObject.object_type:type_name -> pb.ObjectType
	8,  // 9: pb.PreviewObject.bounding:type_name -> pb.BoundingPoly
	9,  // 10: pb.PreviewObject.angle:type_name -> pb.Angle
	25, // 11: pb.PreviewObject.attributes:type_name -> pb.PreviewObject.AttributesEntry
	0,  // 12: pb.PreviewObject.track_event:type_name -> pb.TrackEvent
	12, // 13: pb.PreviewObject.associations:type_name -> pb.ObjectAssociation
	14, // 14: pb.PreviewObject.events:type_name -> pb.Event
	22, // 15: pb.PreviewObject.crowd:type_name -> pb.CrowdObject
	18, // 16: pb.PreviewObject.scenario:type_name -> pb.ScenarioObject
	23, // 17: pb.PreviewObject.algo:type_name -> pb.AlgoObject
	16, // 18: pb.PreviewObject.event:type_name -> pb.EventObject
	5,  // 19: pb.ScenarioObject.type:type_name -> pb.ScenarioType
	8,  // 20: pb.CrossLineObject.roi:type_name -> pb.BoundingPoly
	8,  // 21: pb.CrowdMovementObject.roi:type_name -> pb.BoundingPoly
	6,  // 22: pb.CrowdMovementObject.directions:type_name -> pb.CrowdDirection
	8,  // 23: pb.CrowdSpeedObject.roi:type_name -> pb.BoundingPoly
	10, // 24: pb.CrowdObject.density_size:type_name -> pb.Size
	27, // 25: pb.CrowdObject.full_head_targets:type_name -> pb.CrowdObject.HeadTargetsAnnotation
	17, // 26: pb.PreviewInfo.objects:type_name -> pb.PreviewObject
	13, // 27: pb.PreviewInfo.rules:type_name -> pb.EventRule
	11, // 28: pb.CrowdObject.HeadTargetInfo.coordinate:type_name -> pb.Vector
	8,  // 29: pb.CrowdObject.HeadTargetInfo.rectangle:type_name -> pb.BoundingPoly
	26, // 30: pb.CrowdObject.HeadTargetsAnnotation.head_targets:type_name -> pb.CrowdObject.HeadTargetInfo
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_preview_info_proto_init() }
func file_preview_info_proto_init() {
	if File_preview_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_preview_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingPoly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Angle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeWithScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossLineObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrowdMovementObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrowdSpeedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrowdObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrowdObject_HeadTargetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preview_info_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrowdObject_HeadTargetsAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_preview_info_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_preview_info_proto_goTypes,
		DependencyIndexes: file_preview_info_proto_depIdxs,
		EnumInfos:         file_preview_info_proto_enumTypes,
		MessageInfos:      file_preview_info_proto_msgTypes,
	}.Build()
	File_preview_info_proto = out.File
	file_preview_info_proto_rawDesc = nil
	file_preview_info_proto_goTypes = nil
	file_preview_info_proto_depIdxs = nil
}
